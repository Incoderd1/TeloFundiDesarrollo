// <auto-generated />
using System;
using AgencyPlatform.Core.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AgencyPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(AgencyPlatformDbContext))]
    [Migration("20250410134044_SyncFailedLoginAttemptsTable")]
    partial class SyncFailedLoginAttemptsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgencyPlatform.Core.Entities.FailedLoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttemptTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email", "IpAddress")
                        .HasDatabaseName("idx_failed_login_attempts_email_ip");

                    b.ToTable("failed_login_attempts", (string)null);
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.acciones_punto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<bool?>("esta_activa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("limite_diario")
                        .HasColumnType("integer");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("puntos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("acciones_puntos_pkey");

                    b.HasIndex(new[] { "nombre" }, "acciones_puntos_nombre_key")
                        .IsUnique();

                    b.ToTable("acciones_puntos", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.acompanante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int?>("agencia_id")
                        .HasColumnType("integer");

                    b.Property<int?>("altura")
                        .HasColumnType("integer");

                    b.Property<string>("ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("disponibilidad")
                        .HasColumnType("text");

                    b.Property<int?>("edad")
                        .HasColumnType("integer");

                    b.Property<bool?>("esta_disponible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool?>("esta_verificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("fecha_verificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("genero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("idiomas")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("moneda")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValueSql("'USD'::character varying");

                    b.Property<string>("nombre_perfil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("pais")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("peso")
                        .HasColumnType("integer");

                    b.Property<decimal?>("tarifa_base")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("acompanantes_pkey");

                    b.HasIndex("agencia_id");

                    b.HasIndex(new[] { "usuario_id" }, "acompanantes_usuario_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "ciudad" }, "idx_acompanantes_ciudad");

                    b.HasIndex(new[] { "esta_disponible" }, "idx_acompanantes_disponible");

                    b.HasIndex(new[] { "esta_verificado" }, "idx_acompanantes_verificado");

                    b.ToTable("acompanantes", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.acompanante_categoria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("acompanante_id")
                        .HasColumnType("integer");

                    b.Property<int>("categoria_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("acompanante_categorias_pkey");

                    b.HasIndex("categoria_id");

                    b.HasIndex(new[] { "acompanante_id", "categoria_id" }, "acompanante_categorias_acompanante_id_categoria_id_key")
                        .IsUnique();

                    b.ToTable("acompanante_categorias", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.agencia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<string>("ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("comision_porcentaje")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasDefaultValueSql("0.00");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("direccion")
                        .HasColumnType("text");

                    b.Property<bool?>("esta_verificada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("fecha_verificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("logo_url")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("pais")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("sitio_web")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("agencias_pkey");

                    b.HasIndex(new[] { "usuario_id" }, "agencias_usuario_id_key")
                        .IsUnique();

                    b.ToTable("agencias", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.anuncios_destacado", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("acompanante_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("cupon_id")
                        .HasColumnType("integer");

                    b.Property<bool?>("esta_activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("fecha_fin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fecha_inicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("monto_pagado")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("anuncios_destacados_pkey");

                    b.HasIndex("acompanante_id");

                    b.HasIndex("cupon_id");

                    b.ToTable("anuncios_destacados", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.auth_proveedore", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("esta_activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("auth_proveedores_pkey");

                    b.HasIndex(new[] { "nombre" }, "auth_proveedores_nombre_key")
                        .IsUnique();

                    b.ToTable("auth_proveedores", "plataforma", t =>
                        {
                            t.HasComment("Proveedores de autenticación soportados (Google, Facebook, etc)");
                        });
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.categoria", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("categorias_pkey");

                    b.HasIndex(new[] { "nombre" }, "categorias_nombre_key")
                        .IsUnique();

                    b.ToTable("categorias", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.cliente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("es_vip")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("fecha_fin_vip")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("fecha_inicio_vip")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("nickname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("puntos_acumulados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("clientes_pkey");

                    b.HasIndex(new[] { "usuario_id" }, "clientes_usuario_id_key")
                        .IsUnique();

                    b.ToTable("clientes", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.compras_paquete", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("cliente_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'completado'::character varying");

                    b.Property<DateTime?>("fecha_compra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("metodo_pago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("monto_pagado")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("paquete_id")
                        .HasColumnType("integer");

                    b.Property<string>("referencia_pago")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("compras_paquetes_pkey");

                    b.HasIndex("cliente_id");

                    b.HasIndex("paquete_id");

                    b.ToTable("compras_paquetes", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.contacto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("acompanante_id")
                        .HasColumnType("integer");

                    b.Property<int?>("cliente_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("esta_registrado")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("fecha_contacto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ip_contacto")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("tipo_contacto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id")
                        .HasName("contactos_pkey");

                    b.HasIndex("acompanante_id");

                    b.HasIndex("cliente_id");

                    b.HasIndex(new[] { "fecha_contacto" }, "idx_contactos_fecha");

                    b.ToTable("contactos", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.cupones_cliente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("cliente_id")
                        .HasColumnType("integer");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("esta_usado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("fecha_creacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("fecha_expiracion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("fecha_uso")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("tipo_cupon_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("cupones_cliente_pkey");

                    b.HasIndex("cliente_id");

                    b.HasIndex("tipo_cupon_id");

                    b.HasIndex(new[] { "codigo" }, "cupones_cliente_codigo_key")
                        .IsUnique();

                    b.ToTable("cupones_cliente", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.failed_login_attempt", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("attempt_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ip_address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("failed_login_attempt");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.foto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("acompanante_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("es_principal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("orden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("id")
                        .HasName("fotos_pkey");

                    b.HasIndex("acompanante_id");

                    b.ToTable("fotos", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.intentos_login", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("bloqueado_hasta")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("intentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("ip_address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("intentos_login_pkey");

                    b.HasIndex(new[] { "email", "ip_address" }, "idx_intentos_login_email_ip");

                    b.ToTable("intentos_login", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.membresias_vip", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<int>("descuento_anuncios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("precio_mensual")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("puntos_mensuales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("membresias_vip_pkey");

                    b.HasIndex(new[] { "nombre" }, "membresias_vip_nombre_key")
                        .IsUnique();

                    b.ToTable("membresias_vip", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.movimientos_punto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("cantidad")
                        .HasColumnType("integer");

                    b.Property<int>("cliente_id")
                        .HasColumnType("integer");

                    b.Property<string>("concepto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("saldo_anterior")
                        .HasColumnType("integer");

                    b.Property<int>("saldo_nuevo")
                        .HasColumnType("integer");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id")
                        .HasName("movimientos_puntos_pkey");

                    b.HasIndex("cliente_id");

                    b.ToTable("movimientos_puntos", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.paquete_cupones_detalle", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("cantidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("paquete_id")
                        .HasColumnType("integer");

                    b.Property<int>("tipo_cupon_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("paquete_cupones_detalle_pkey");

                    b.HasIndex("paquete_id");

                    b.HasIndex("tipo_cupon_id");

                    b.ToTable("paquete_cupones_detalle", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.paquetes_cupone", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<bool?>("activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<bool?>("incluye_sorteo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("puntos_otorgados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("paquetes_cupones_pkey");

                    b.HasIndex(new[] { "nombre" }, "paquetes_cupones_nombre_key")
                        .IsUnique();

                    b.ToTable("paquetes_cupones", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.participantes_sorteo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("cliente_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("es_ganador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("fecha_participacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("sorteo_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("participantes_sorteo_pkey");

                    b.HasIndex("cliente_id");

                    b.HasIndex(new[] { "sorteo_id", "cliente_id" }, "participantes_sorteo_sorteo_id_cliente_id_key")
                        .IsUnique();

                    b.ToTable("participantes_sorteo", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.refresh_token", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("device_info")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("esta_revocado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("fecha_expiracion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ip_address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("user_agent")
                        .HasColumnType("text");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("refresh_tokens_pkey");

                    b.HasIndex("usuario_id");

                    b.HasIndex(new[] { "token" }, "idx_refresh_tokens_token");

                    b.HasIndex(new[] { "token" }, "refresh_tokens_token_key")
                        .IsUnique();

                    b.ToTable("refresh_tokens", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "nombre" }, "roles_nombre_key")
                        .IsUnique();

                    b.ToTable("roles", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.servicio", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("acompanante_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<int?>("duracion_minutos")
                        .HasColumnType("integer");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("servicios_pkey");

                    b.HasIndex("acompanante_id");

                    b.ToTable("servicios", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.sorteo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<bool?>("esta_activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("fecha_fin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fecha_inicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("premio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("sorteos_pkey");

                    b.ToTable("sorteos", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.suscripciones_vip", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("cliente_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("es_renovacion_automatica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'activa'::character varying");

                    b.Property<DateTime>("fecha_fin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fecha_inicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("membresia_id")
                        .HasColumnType("integer");

                    b.Property<string>("metodo_pago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("referencia_pago")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("suscripciones_vip_pkey");

                    b.HasIndex("cliente_id");

                    b.HasIndex("membresia_id");

                    b.ToTable("suscripciones_vip", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.tipos_cupone", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("porcentaje_descuento")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("tipos_cupones_pkey");

                    b.HasIndex(new[] { "nombre" }, "tipos_cupones_nombre_key")
                        .IsUnique();

                    b.ToTable("tipos_cupones", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.tokens_reset_password", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("esta_usado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("fecha_expiracion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("tokens_reset_password_pkey");

                    b.HasIndex("usuario_id");

                    b.HasIndex(new[] { "token" }, "idx_reset_password_token");

                    b.HasIndex(new[] { "token" }, "tokens_reset_password_token_key")
                        .IsUnique();

                    b.ToTable("tokens_reset_password", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.usuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("esta_activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("fecha_registro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("password_required")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("provider")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'local'::character varying");

                    b.Property<int>("rol_id")
                        .HasColumnType("integer");

                    b.Property<string>("telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ultimo_acceso")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("usuarios_pkey");

                    b.HasIndex("rol_id");

                    b.HasIndex(new[] { "email" }, "usuarios_email_key")
                        .IsUnique();

                    b.ToTable("usuarios", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.usuario_auth_externo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("datos_extra")
                        .HasColumnType("jsonb");

                    b.Property<bool?>("email_verificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("fecha_ultima_autenticacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("proveedor_id")
                        .HasColumnType("integer");

                    b.Property<string>("proveedor_user_id")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("usuario_auth_externo_pkey");

                    b.HasIndex("usuario_id");

                    b.HasIndex(new[] { "proveedor_id", "proveedor_user_id" }, "idx_usuario_auth_externo_ids");

                    b.HasIndex(new[] { "proveedor_id", "proveedor_user_id" }, "usuario_auth_externo_proveedor_id_proveedor_user_id_key")
                        .IsUnique();

                    b.ToTable("usuario_auth_externo", "plataforma", t =>
                        {
                            t.HasComment("Asociación entre usuarios y sus cuentas en proveedores externos");
                        });
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.verificacione", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("acompanante_id")
                        .HasColumnType("integer");

                    b.Property<int>("agencia_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("estado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'aprobada'::character varying");

                    b.Property<DateTime?>("fecha_verificacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("monto_cobrado")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("observaciones")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("verificaciones_pkey");

                    b.HasIndex("agencia_id");

                    b.HasIndex(new[] { "acompanante_id" }, "verificaciones_acompanante_id_key")
                        .IsUnique();

                    b.ToTable("verificaciones", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.visitas_perfil", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("acompanante_id")
                        .HasColumnType("integer");

                    b.Property<int?>("cliente_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("duracion_segundos")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("fecha_visita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ip_visitante")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("user_agent")
                        .HasColumnType("text");

                    b.HasKey("id")
                        .HasName("visitas_perfil_pkey");

                    b.HasIndex("acompanante_id");

                    b.HasIndex("cliente_id");

                    b.HasIndex(new[] { "fecha_visita" }, "idx_visitas_perfil_fecha");

                    b.ToTable("visitas_perfil", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.vw_agencias_acompanante", b =>
                {
                    b.Property<long?>("acompanantes_disponibles")
                        .HasColumnType("bigint");

                    b.Property<long?>("acompanantes_verificados")
                        .HasColumnType("bigint");

                    b.Property<int?>("agencia_id")
                        .HasColumnType("integer");

                    b.Property<string>("agencia_nombre")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("agencia_verificada")
                        .HasColumnType("boolean");

                    b.Property<long?>("total_acompanantes")
                        .HasColumnType("bigint");

                    b.ToTable((string)null);

                    b.ToView("vw_agencias_acompanantes", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.vw_clientes_info", b =>
                {
                    b.Property<long?>("cupones_disponibles")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("es_vip")
                        .HasColumnType("boolean");

                    b.Property<int?>("id")
                        .HasColumnType("integer");

                    b.Property<string>("nickname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("puntos_acumulados")
                        .HasColumnType("integer");

                    b.Property<int?>("usuario_id")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_clientes_info", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.vw_perfiles_destacado", b =>
                {
                    b.Property<int?>("agencia_id")
                        .HasColumnType("integer");

                    b.Property<int?>("altura")
                        .HasColumnType("integer");

                    b.Property<string>("ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime?>("destacado_hasta")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("disponibilidad")
                        .HasColumnType("text");

                    b.Property<int?>("edad")
                        .HasColumnType("integer");

                    b.Property<bool?>("esta_disponible")
                        .HasColumnType("boolean");

                    b.Property<bool?>("esta_verificado")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("fecha_verificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("genero")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("id")
                        .HasColumnType("integer");

                    b.Property<string>("idiomas")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("moneda")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("nombre_perfil")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("pais")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("peso")
                        .HasColumnType("integer");

                    b.Property<decimal?>("tarifa_base")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("tipo_destacado")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("usuario_id")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_perfiles_destacados", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.vw_perfiles_populare", b =>
                {
                    b.Property<int?>("agencia_id")
                        .HasColumnType("integer");

                    b.Property<string>("ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("esta_verificado")
                        .HasColumnType("boolean");

                    b.Property<int?>("id")
                        .HasColumnType("integer");

                    b.Property<string>("moneda")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("nombre_perfil")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("tarifa_base")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<long?>("total_contactos")
                        .HasColumnType("bigint");

                    b.ToTable((string)null);

                    b.ToView("vw_perfiles_populares", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.vw_perfiles_reciente", b =>
                {
                    b.Property<int?>("agencia_id")
                        .HasColumnType("integer");

                    b.Property<int?>("altura")
                        .HasColumnType("integer");

                    b.Property<string>("ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("disponibilidad")
                        .HasColumnType("text");

                    b.Property<int?>("edad")
                        .HasColumnType("integer");

                    b.Property<bool?>("esta_disponible")
                        .HasColumnType("boolean");

                    b.Property<bool?>("esta_verificado")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("fecha_verificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("foto_principal")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("genero")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("id")
                        .HasColumnType("integer");

                    b.Property<string>("idiomas")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("moneda")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("nombre_perfil")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("pais")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("peso")
                        .HasColumnType("integer");

                    b.Property<decimal?>("tarifa_base")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("usuario_id")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_perfiles_recientes", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.vw_ranking_perfile", b =>
                {
                    b.Property<int?>("agencia_id")
                        .HasColumnType("integer");

                    b.Property<string>("ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("esta_verificado")
                        .HasColumnType("boolean");

                    b.Property<int?>("id")
                        .HasColumnType("integer");

                    b.Property<string>("nombre_perfil")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("score_actividad")
                        .HasColumnType("bigint");

                    b.Property<long?>("total_contactos")
                        .HasColumnType("bigint");

                    b.Property<long?>("total_visitas")
                        .HasColumnType("bigint");

                    b.ToTable((string)null);

                    b.ToView("vw_ranking_perfiles", "plataforma");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.acompanante", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.agencia", "agencia")
                        .WithMany("acompanantes")
                        .HasForeignKey("agencia_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("acompanantes_agencia_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.usuario", "usuario")
                        .WithOne("acompanante")
                        .HasForeignKey("AgencyPlatform.Core.Entities.acompanante", "usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("acompanantes_usuario_id_fkey");

                    b.Navigation("agencia");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.acompanante_categoria", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.acompanante", "acompanante")
                        .WithMany("acompanante_categoria")
                        .HasForeignKey("acompanante_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("acompanante_categorias_acompanante_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.categoria", "categoria")
                        .WithMany("acompanante_categoria")
                        .HasForeignKey("categoria_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("acompanante_categorias_categoria_id_fkey");

                    b.Navigation("acompanante");

                    b.Navigation("categoria");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.agencia", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.usuario", "usuario")
                        .WithOne("agencia")
                        .HasForeignKey("AgencyPlatform.Core.Entities.agencia", "usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("agencias_usuario_id_fkey");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.anuncios_destacado", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.acompanante", "acompanante")
                        .WithMany("anuncios_destacados")
                        .HasForeignKey("acompanante_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("anuncios_destacados_acompanante_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.cupones_cliente", "cupon")
                        .WithMany("anuncios_destacados")
                        .HasForeignKey("cupon_id")
                        .HasConstraintName("anuncios_destacados_cupon_id_fkey");

                    b.Navigation("acompanante");

                    b.Navigation("cupon");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.cliente", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.usuario", "usuario")
                        .WithOne("cliente")
                        .HasForeignKey("AgencyPlatform.Core.Entities.cliente", "usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("clientes_usuario_id_fkey");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.compras_paquete", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.cliente", "cliente")
                        .WithMany("compras_paquetes")
                        .HasForeignKey("cliente_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("compras_paquetes_cliente_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.paquetes_cupone", "paquete")
                        .WithMany("compras_paquetes")
                        .HasForeignKey("paquete_id")
                        .IsRequired()
                        .HasConstraintName("compras_paquetes_paquete_id_fkey");

                    b.Navigation("cliente");

                    b.Navigation("paquete");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.contacto", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.acompanante", "acompanante")
                        .WithMany("contactos")
                        .HasForeignKey("acompanante_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("contactos_acompanante_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.cliente", "cliente")
                        .WithMany("contactos")
                        .HasForeignKey("cliente_id")
                        .HasConstraintName("contactos_cliente_id_fkey");

                    b.Navigation("acompanante");

                    b.Navigation("cliente");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.cupones_cliente", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.cliente", "cliente")
                        .WithMany("cupones_clientes")
                        .HasForeignKey("cliente_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cupones_cliente_cliente_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.tipos_cupone", "tipo_cupon")
                        .WithMany("cupones_clientes")
                        .HasForeignKey("tipo_cupon_id")
                        .IsRequired()
                        .HasConstraintName("cupones_cliente_tipo_cupon_id_fkey");

                    b.Navigation("cliente");

                    b.Navigation("tipo_cupon");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.foto", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.acompanante", "acompanante")
                        .WithMany("fotos")
                        .HasForeignKey("acompanante_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fotos_acompanante_id_fkey");

                    b.Navigation("acompanante");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.movimientos_punto", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.cliente", "cliente")
                        .WithMany("movimientos_puntos")
                        .HasForeignKey("cliente_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("movimientos_puntos_cliente_id_fkey");

                    b.Navigation("cliente");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.paquete_cupones_detalle", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.paquetes_cupone", "paquete")
                        .WithMany("paquete_cupones_detalles")
                        .HasForeignKey("paquete_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("paquete_cupones_detalle_paquete_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.tipos_cupone", "tipo_cupon")
                        .WithMany("paquete_cupones_detalles")
                        .HasForeignKey("tipo_cupon_id")
                        .IsRequired()
                        .HasConstraintName("paquete_cupones_detalle_tipo_cupon_id_fkey");

                    b.Navigation("paquete");

                    b.Navigation("tipo_cupon");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.participantes_sorteo", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.cliente", "cliente")
                        .WithMany("participantes_sorteos")
                        .HasForeignKey("cliente_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("participantes_sorteo_cliente_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.sorteo", "sorteo")
                        .WithMany("participantes_sorteos")
                        .HasForeignKey("sorteo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("participantes_sorteo_sorteo_id_fkey");

                    b.Navigation("cliente");

                    b.Navigation("sorteo");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.refresh_token", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.usuario", "usuario")
                        .WithMany("refresh_tokens")
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("refresh_tokens_usuario_id_fkey");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.servicio", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.acompanante", "acompanante")
                        .WithMany("servicios")
                        .HasForeignKey("acompanante_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("servicios_acompanante_id_fkey");

                    b.Navigation("acompanante");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.suscripciones_vip", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.cliente", "cliente")
                        .WithMany("suscripciones_vips")
                        .HasForeignKey("cliente_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("suscripciones_vip_cliente_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.membresias_vip", "membresia")
                        .WithMany("suscripciones_vips")
                        .HasForeignKey("membresia_id")
                        .IsRequired()
                        .HasConstraintName("suscripciones_vip_membresia_id_fkey");

                    b.Navigation("cliente");

                    b.Navigation("membresia");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.tokens_reset_password", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.usuario", "usuario")
                        .WithMany("tokens_reset_passwords")
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tokens_reset_password_usuario_id_fkey");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.usuario", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.role", "rol")
                        .WithMany("usuarios")
                        .HasForeignKey("rol_id")
                        .IsRequired()
                        .HasConstraintName("usuarios_rol_id_fkey");

                    b.Navigation("rol");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.usuario_auth_externo", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.auth_proveedore", "proveedor")
                        .WithMany("usuario_auth_externos")
                        .HasForeignKey("proveedor_id")
                        .IsRequired()
                        .HasConstraintName("usuario_auth_externo_proveedor_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.usuario", "usuario")
                        .WithMany("usuario_auth_externos")
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("usuario_auth_externo_usuario_id_fkey");

                    b.Navigation("proveedor");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.verificacione", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.acompanante", "acompanante")
                        .WithOne("verificacione")
                        .HasForeignKey("AgencyPlatform.Core.Entities.verificacione", "acompanante_id")
                        .IsRequired()
                        .HasConstraintName("verificaciones_acompanante_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.agencia", "agencia")
                        .WithMany("verificaciones")
                        .HasForeignKey("agencia_id")
                        .IsRequired()
                        .HasConstraintName("verificaciones_agencia_id_fkey");

                    b.Navigation("acompanante");

                    b.Navigation("agencia");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.visitas_perfil", b =>
                {
                    b.HasOne("AgencyPlatform.Core.Entities.acompanante", "acompanante")
                        .WithMany("visitas_perfils")
                        .HasForeignKey("acompanante_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("visitas_perfil_acompanante_id_fkey");

                    b.HasOne("AgencyPlatform.Core.Entities.cliente", "cliente")
                        .WithMany("visitas_perfils")
                        .HasForeignKey("cliente_id")
                        .HasConstraintName("visitas_perfil_cliente_id_fkey");

                    b.Navigation("acompanante");

                    b.Navigation("cliente");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.acompanante", b =>
                {
                    b.Navigation("acompanante_categoria");

                    b.Navigation("anuncios_destacados");

                    b.Navigation("contactos");

                    b.Navigation("fotos");

                    b.Navigation("servicios");

                    b.Navigation("verificacione");

                    b.Navigation("visitas_perfils");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.agencia", b =>
                {
                    b.Navigation("acompanantes");

                    b.Navigation("verificaciones");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.auth_proveedore", b =>
                {
                    b.Navigation("usuario_auth_externos");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.categoria", b =>
                {
                    b.Navigation("acompanante_categoria");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.cliente", b =>
                {
                    b.Navigation("compras_paquetes");

                    b.Navigation("contactos");

                    b.Navigation("cupones_clientes");

                    b.Navigation("movimientos_puntos");

                    b.Navigation("participantes_sorteos");

                    b.Navigation("suscripciones_vips");

                    b.Navigation("visitas_perfils");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.cupones_cliente", b =>
                {
                    b.Navigation("anuncios_destacados");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.membresias_vip", b =>
                {
                    b.Navigation("suscripciones_vips");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.paquetes_cupone", b =>
                {
                    b.Navigation("compras_paquetes");

                    b.Navigation("paquete_cupones_detalles");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.role", b =>
                {
                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.sorteo", b =>
                {
                    b.Navigation("participantes_sorteos");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.tipos_cupone", b =>
                {
                    b.Navigation("cupones_clientes");

                    b.Navigation("paquete_cupones_detalles");
                });

            modelBuilder.Entity("AgencyPlatform.Core.Entities.usuario", b =>
                {
                    b.Navigation("acompanante");

                    b.Navigation("agencia");

                    b.Navigation("cliente");

                    b.Navigation("refresh_tokens");

                    b.Navigation("tokens_reset_passwords");

                    b.Navigation("usuario_auth_externos");
                });
#pragma warning restore 612, 618
        }
    }
}
